# SQLクライアントアプリケーションのビルドとリリースワークフロー
# このワークフローではWindows向けのElectronアプリケーションをビルドし、
# タグ付けされた場合は自動的にGitHubリリースを作成します。
name: Hello World Test

# ワークフローのトリガー設定
on:
  push:
    branches: [ main ]   # メインブランチへのプッシュ時に実行
    tags:
      - 'v*'            # vから始まるタグ（例：v1.0.0）がプッシュされた時に実行
  pull_request:
    branches: [ main ]   # メインブランチへのプルリクエスト時に実行
  workflow_dispatch:     # 手動でワークフローを実行するオプション

# 実行するジョブの定義
jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install dependencies
      run: |
        pnpm install
        
    - name: Build Next.js App
      run: |
        cd renderer
        npx next build
      
    - name: Test Hello World
      run: |
        echo "Testing Hello World SQL Client Application"
        echo "Build successful!"

# GitHubリリース作成ジョブ（タグ付けされた場合のみ実行）
release:
  needs: test                  # testジョブが成功した後に実行
  if: startsWith(github.ref, 'refs/tags/v')  # vから始まるタグの場合のみ実行
  runs-on: ubuntu-latest        # リリース作成はUbuntu環境で実行
  
  steps:
    # ステップ1: ビルドジョブでアップロードした成果物をダウンロード
    - name: ビルド成果物のダウンロード
      uses: actions/download-artifact@v4  # 最新バージョンv4を使用
      with:
        name: electron-app      # ダウンロードする成果物の名前（testジョブでアップロードしたもの）
        path: dist              # ダウンロード先のパス
        
    # ステップ2: GitHubリリースの作成と.exeファイルの添付
    - name: リリースの作成
      uses: softprops/action-gh-release@v1  # GitHubリリース作成アクション
      with:
        files: dist/*.exe                   # リリースに添付するファイル
        generate_release_notes: true        # コミットメッセージから自動的にリリースノートを生成
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHubが自動的に提供するトークンを使用 