# SQLクライアントアプリケーションのビルドとリリースワークフロー
# このワークフローではWindows向けのElectronアプリケーションをビルドし、
# タグ付けされた場合は自動的にGitHubリリースを作成します。
name: ビルドとリリース

# ワークフローのトリガー設定
on:
  push:
    branches: [ main ]   # メインブランチへのプッシュ時に実行
    tags:
      - 'v*'            # vから始まるタグ（例：v1.0.0）がプッシュされた時に実行
  pull_request:
    branches: [ main ]   # メインブランチへのプルリクエスト時に実行
  workflow_dispatch:     # 手動でワークフローを実行するオプション

# 実行するジョブの定義
jobs:
  # アプリケーションのビルドジョブ
  build:
    runs-on: windows-latest  # Windows環境でビルドを実行（Windowsアプリケーションのため）
    
    steps:
      # ステップ1: ソースコードのチェックアウト
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4  # 最新バージョンのcheckoutアクションを使用
      
      # ステップ2: Node.jsのセットアップ
      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 18  # Node.js バージョン18を使用（Electronとの互換性を考慮）
          
      # ステップ3: pnpmのセットアップ（パッケージマネージャー）
      - name: pnpmのセットアップ
        uses: pnpm/action-setup@v2
        with:
          version: 8            # pnpm バージョン8を使用
          run_install: false    # インストールは後で実行するため、ここではスキップ
          
      # ステップ4: 依存関係のキャッシュ設定（ビルド時間短縮のため）
      - name: 依存関係のキャッシュ
        uses: actions/cache@v3
        with:
          path: |               # キャッシュするパスの指定
            .pnpm-store         # pnpmのキャッシュディレクトリ
            node_modules        # インストールされたnode_modules
            .next/cache         # Next.jsのビルドキャッシュ
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}  # キャッシュキーの設定（OSとロックファイルのハッシュに基づく）
          restore-keys: |       # 完全に一致しない場合の代替キー
            ${{ runner.os }}-pnpm
        
      # ステップ5: 依存関係のインストール
      - name: 依存関係のインストール
        run: pnpm install       # pnpmを使用してプロジェクトの依存関係をインストール
      
      # ステップ6: Electronアプリケーションのソースコードコンパイル
      - name: Electronアプリのコンパイル
        run: pnpm compile-electron  # TypeScriptからJavaScriptへのコンパイル（electron/ディレクトリのコード）
      
      # ステップ7: Next.jsアプリケーションのビルド
      - name: Next.jsアプリのビルド
        run: pnpm build  # Next.jsアプリケーションの静的ファイル生成
      
      # ステップ8: Electronアプリケーションのインストーラー(.exe)ビルド
      - name: Electronアプリケーションのビルド
        run: pnpm build:electron  # electron-builderを使ってWindows用インストーラーを作成
      
      # ステップ9: ポータブル版(.exe)のビルド（インストール不要のスタンドアロン版）
      - name: ポータブル版のビルド
        run: pnpm build:portable  # ポータブル版実行ファイルの作成
      
      # ステップ10: ビルドした.exeファイルをGitHub Actionsの成果物としてアップロード
      - name: ビルド成果物のアップロード
        uses: actions/upload-artifact@v4  # v3からv4に更新（非推奨警告対応）
        with:
          name: electron-app      # 成果物の名前
          path: dist/*.exe        # アップロードするファイルのパス（dist内の全.exeファイル）
          
  # GitHubリリース作成ジョブ（タグ付けされた場合のみ実行）
  release:
    needs: build                  # buildジョブが成功した後に実行
    if: startsWith(github.ref, 'refs/tags/v')  # vから始まるタグの場合のみ実行
    runs-on: ubuntu-latest        # リリース作成はUbuntu環境で実行
    
    steps:
      # ステップ1: ビルドジョブでアップロードした成果物をダウンロード
      - name: ビルド成果物のダウンロード
        uses: actions/download-artifact@v4  # v3からv4に更新（非推奨警告対応）
        with:
          name: electron-app      # ダウンロードする成果物の名前（buildジョブでアップロードしたもの）
          path: dist              # ダウンロード先のパス
          
      # ステップ2: GitHubリリースの作成と.exeファイルの添付
      - name: リリースの作成
        uses: softprops/action-gh-release@v1  # GitHubリリース作成アクション
        with:
          files: dist/*.exe                   # リリースに添付するファイル
          generate_release_notes: true        # コミットメッセージから自動的にリリースノートを生成
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHubが自動的に提供するトークンを使用 